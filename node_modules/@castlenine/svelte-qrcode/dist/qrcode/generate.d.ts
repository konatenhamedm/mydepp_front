/**
 * @fileoverview
 *
 * @version 1.0.0 (2023-03-20)
 * @author Bonosoft, Bo Norgaard
 *
 * @version 1.1.0 (2023-09-04)
 * @editor Alexandre Castlenine
 *
 * - Code formatted
 * - Converted to TypeScript
 * - Replaced prototypes with class
 * - Code still has no dependencies
 *
 * @version 1.2.0 (2024-04-26)
 * @editor Alexandre Castlenine
 *
 * - Added the possibility to have an image (logo) in the center of the QRCode in base64 format
 *
 * @version 2.0.0 (2024-04-29)
 * @editor Alexandre Castlenine
 *
 * - Rename some properties to make them more explicit (follow the migration guide to learn more)
 * - Added anchorsOuterColor and anchorsInnerColor properties
 * - Added shape property
 * - Code refactored to use template literals
 *
 * @version 2.1.0 (2024-04-30)
 * @editor Alexandre Castlenine
 *
 * - Added haveBackgroundRoundedEdges
 *
 * @version 2.2.0 (2024-04-30)
 * @editor Alexandre Castlenine
 *
 * - Added haveGappedModules
 *
 * @version 2.3.0 (2024-09-27)
 * @editor x032205
 *
 * - Made logos adjust size to fit modules
 * - Made logo padding use modules as units
 *
 */
interface Options {
    data: string;
    typeNumber: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40;
    errorCorrectionLevel: 'L' | 'M' | 'Q' | 'H';
    backgroundColor: string;
    modulesColor: string;
    anchorsOuterColor: string;
    anchorsInnerColor: string;
    shape: 'square' | 'circle';
    haveBackgroundRoundedEdges: boolean;
    haveGappedModules: boolean;
    join: boolean;
    container?: string;
    padding: number;
    width: number;
    height: number;
    logoInBase64?: string;
    logoBackgroundColor?: string;
    logoPadding?: number;
    logoWidth?: number;
    logoHeight?: number;
}
declare enum QRErrorCorrectLevel {
    L = 1,
    M = 0,
    Q = 3,
    H = 2
}
declare class QRCode {
    private options;
    private qrCodeModel;
    constructor(userOptions: any);
    _getErrorCorrectLevel(errorCorrectionLevel: string): QRErrorCorrectLevel;
    _getTypeNumber(data: string, errorCorrectionLevel: string): number;
    _getUTF8Length(data: string): number;
    isAnchor(x: number, y: number, length: number): boolean;
    svg(): string;
}
export { QRCode };
export type { Options };
//# sourceMappingURL=generate.d.ts.map