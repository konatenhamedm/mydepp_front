import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        data?: string;
        typeNumber?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40;
        errorCorrectionLevel?: "L" | "M" | "Q" | "H";
        backgroundColor?: string;
        color?: string;
        modulesColor?: string;
        anchorsOuterColor?: string;
        anchorsInnerColor?: string;
        shape?: "square" | "circle";
        haveBackgroundRoundedEdges?: boolean;
        haveGappedModules?: boolean;
        isJoin?: boolean;
        isResponsive?: boolean;
        padding?: number;
        size?: number;
        width?: number;
        height?: number;
        logoInBase64?: string;
        logoPath?: string;
        logoBackgroundColor?: string;
        logoPadding?: number;
        logoSize?: number;
        logoWidth?: number;
        logoHeight?: number;
        waitForLogo?: boolean;
        dispatchDownloadUrl?: boolean;
        downloadUrlFileFormat?: "svg" | "png" | "jpg" | "jpeg" | "webp";
    };
    events: {
        qrCodeRegeneratedWithLogo: CustomEvent<any>;
        qrCodeGenerated: CustomEvent<any>;
        downloadUrlGenerated: CustomEvent<any>;
        qrCodeGenerationFailed: CustomEvent<any>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export type QrcodeProps = typeof __propDef.props;
export type QrcodeEvents = typeof __propDef.events;
export type QrcodeSlots = typeof __propDef.slots;
/**
 * ### QR Code Generator Component
 *
 * @param data (string) Data of the QR code to be encoded. **Required to generate the QR Code**
 *
 * &nbsp;
 *
 * @param typeNumber (number) QR code type number (1 ~ 40), or 0 for auto detection. Default is `0`
 *
 * &nbsp;
 *
 * @param errorCorrectionLevel (string) Error correction level of the QR Code. Possible values: `'L'`, `'M'`, `'Q'`, `'H'`. Default is `'M'`
 *
 * &nbsp;
 *
 * @param backgroundColor (string) Background color of the QR code. Default is `'#ffffff'`
 * @param color (string) Modules and anchors color of the QR code.  Will be applied to `modulesColor`, `anchorsOuterColor`, and `anchorsInnerColor` properties if they are not defined. Default is `'#000000'`
 * @param modulesColor (string) Modules color of the QR code. Default is the same as the `color` property
 * @param anchorsOuterColor (string) Outer anchors color of the QR code. Default is the same as the `modulesColor` property
 * @param anchorsInnerColor (string) Inner anchors color of the QR code. Default is the same as the `anchorsOuterColor` property
 *
 * &nbsp;
 *
 * @param shape (string) Shape of the QR code. Possible values: `'square'`, `'circle'`. Default is `'square'`
 * @param haveBackgroundRoundedEdges (boolean) If set to `true`, the background of the QR code will have rounded edges. Default is `false`
 * @param haveGappedModules (boolean) If set to `true`, the modules of the QR code will have gaps. Default is `false`
 *
 * &nbsp;
 *
 * @param isJoin (boolean) // If `isJoin` is set to `true`, the QR code will be generated as a single SVG element. If set to `false`, each square will be an individual SVG element. Default is `false`
 * **Note:** The `isJoin` property is useful for performance optimization, especially when generating a large number of QR codes. However, the colors of the anchors and modules will not differ, and the shape can only be `'square'` when `isJoin` is set to `true`
 * @param isResponsive (boolean) If set to `true`, the QR code will be responsive and adapt to the available space in its parent element
 *
 * &nbsp;
 *
 * @param padding (number) Padding around the QR code. Default is `1`
 * @param size (number) Width and height dimensions in pixels of the QR code. Default is `256` pixels
 * @param width (number) The width of the QR Code in pixels. Default is the same as the `size` property
 * @param height (number) The height of the QR Code in pixels. Default is the same as the `size` property
 *
 * &nbsp;
 *
 * @param logoInBase64 (string) base64-encoded logo image. If it's an empty string (`''`) or undefined, it will be ignored. Use this property instead of `logoPath` for faster logo loading times.
 * **Note:** There is no validation of the base64 encoding; ensure it is valid. Default is `''` (no logo)
 * @param logoPath (string) The path to the logo file to be added to the center of the QR Code. Default is `''` (no logo).
 * **Note:** With the logo, it is recommended to have a minimum error correction level of `'M'` to ensure the QR Code is readable
 * @param logoBackgroundColor (string) Color the logo background. Default is `''` (same as the QR Code `backgroundColor` property)
 * @param logoPadding (number) Padding around the logo. 1 logoPadding  = 1 module unit. Default is `1` module unit
 * @param logoSize (number) Size of the logo in percentage relative to the QR code size. Default is `15`%
 * @param logoWidth (number) Width of the logo in percentage relative to the QR code width. Default is the same as the `logoSize` property
 * @param logoHeight (number) Height of the logo in percentage relative to the QR code height. Default is the same as the `logoSize` property
 * @param waitForLogo (boolean) If set to `true`, the QR code will not render until the logo has fully loaded. Default is `false`
 *
 * &nbsp;
 *
 * @param dispatchDownloadUrl (boolean) If set to `true`, a download url will be generated for the QR code and dispatched to the parent component. Default is `false`
 * @param downloadUrlFileFormat (string) The file format of the download url. Possible values: `'svg'`, `'png'`, `'jpg'`, `'jpeg'`, `'webp'`. Default is `'svg'`
 *
 * &nbsp;
 * &nbsp;
 *
 * @dispatch qrCodeGenerated (void) The QR Code is successfully generated
 * @dispatch qrCodeRegeneratedWithLogo (void) The QR Code is successfully regenerated with the logo
 * @dispatch qrCodeGenerationFailed (void) The QR Code generation failed. The error message can be retrieved via `event.detail`. Check the console for more information
 * @dispatch downloadUrlGenerated (string) The download url for the QR Code is generated and dispatched to the parent component if the `dispatchDownloadUrl` property is set to `true`
 *
 * &nbsp;
 */
export default class Qrcode extends SvelteComponentTyped<QrcodeProps, QrcodeEvents, QrcodeSlots> {
}
export {};
//# sourceMappingURL=qrcode.svelte.d.ts.map