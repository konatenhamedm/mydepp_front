import { type VariantProps } from "tailwind-variants";
import type { ClassValue } from "svelte/elements";
export type TextareaVariants = VariantProps<typeof textarea>;
export declare const textarea: import("tailwind-variants").TVReturnType<{
    cols: {
        false: {
            base: string;
            wrapper: string;
        };
    };
    wrapped: {
        false: {
            wrapper: string;
        };
    };
    hasHeader: {
        true: {
            headerCls: string;
        };
        false: {
            innerWrapper: string;
        };
    };
    hasFooter: {
        true: {
            footerCls: string;
        };
        false: {
            innerWrapper: string;
        };
    };
}, {
    divWrapper: string;
    base: string;
    wrapper: string;
    innerWrapper: string;
    headerCls: string;
    footerCls: string;
    addonCls: string;
    closebutton: string;
}, undefined, {
    cols: {
        false: {
            base: string;
            wrapper: string;
        };
    };
    wrapped: {
        false: {
            wrapper: string;
        };
    };
    hasHeader: {
        true: {
            headerCls: string;
        };
        false: {
            innerWrapper: string;
        };
    };
    hasFooter: {
        true: {
            footerCls: string;
        };
        false: {
            innerWrapper: string;
        };
    };
}, {
    divWrapper: string;
    base: string;
    wrapper: string;
    innerWrapper: string;
    headerCls: string;
    footerCls: string;
    addonCls: string;
    closebutton: string;
}, import("tailwind-variants").TVReturnType<{
    cols: {
        false: {
            base: string;
            wrapper: string;
        };
    };
    wrapped: {
        false: {
            wrapper: string;
        };
    };
    hasHeader: {
        true: {
            headerCls: string;
        };
        false: {
            innerWrapper: string;
        };
    };
    hasFooter: {
        true: {
            footerCls: string;
        };
        false: {
            innerWrapper: string;
        };
    };
}, {
    divWrapper: string;
    base: string;
    wrapper: string;
    innerWrapper: string;
    headerCls: string;
    footerCls: string;
    addonCls: string;
    closebutton: string;
}, undefined, unknown, unknown, undefined>>;
export type TextareaSlots = keyof typeof textarea.slots;
export type TextareaTheme = Partial<Record<TextareaSlots, ClassValue>>;
