import { type ThemeConfig } from "..";
import type { ClassValue } from "clsx";
export declare function getTheme<K extends keyof ThemeConfig>(componentKey: K): ThemeConfig[K];
type Slots<T extends {
    slots: Record<string, unknown>;
}> = Omit<T["slots"], "base">;
export type Classes<T extends {
    slots: Record<string, unknown>;
}> = {
    classes?: Partial<{
        [K in keyof Slots<T>]: ClassValue;
    }>;
};
/**
 * Logs a warning when deprecated theme-related props are used in a component.
 *
 * This utility is intended to aid migration by detecting legacy class-related props
 * and printing a warning in the console during development. If a `replacements` map is
 * provided, it will suggest how to refactor the props using either the `class` prop
 * or the `classes` object.
 *
 * @param component - The name of the component where the deprecated props were used.
 * @param names - A record of deprecated prop names and their values (e.g. `{ aClass: "..." }`).
 * @param replacements - Optional mapping of deprecated keys to their new equivalents,
 * such as divClass: "class", div2Class: "top", div3Class: "leftTop", ...
 *
 * @example
 * ```ts
 * warnThemeDeprecation("Badge", {
 *   aClass: "text-sm"
 * }, {
 *   aClass: "class"
 * });
 * // Console output:
 * // The following "Badge" props are deprecated: "aClass".
 * // Please update your code to use the new "classes" or "class" prop.
 * // Migration example: class="text-sm"
 * ```
 */
export declare function warnThemeDeprecation(component: string, names: Record<string, unknown>, replacements?: Record<string, unknown>): void;
export {};
