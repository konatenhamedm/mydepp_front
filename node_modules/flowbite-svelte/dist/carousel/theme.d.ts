import { type VariantProps } from "tailwind-variants";
import type { ClassValue } from "svelte/elements";
export type CarouselVariants = VariantProps<typeof carousel>;
export declare const carousel: import("tailwind-variants").TVReturnType<{}, undefined, "grid overflow-hidden relative rounded-lg h-56 sm:h-64 xl:h-80 2xl:h-96", {}, undefined, import("tailwind-variants").TVReturnType<{}, undefined, "grid overflow-hidden relative rounded-lg h-56 sm:h-64 xl:h-80 2xl:h-96", unknown, unknown, undefined>>;
export type CarouselTheme = ClassValue;
export declare const carouselIndicators: import("tailwind-variants").TVReturnType<{
    selected: {
        true: {
            indicator: string;
        };
        false: {
            indicator: string;
        };
    };
    position: {
        top: {
            base: string;
        };
        bottom: {
            base: string;
        };
        withThumbnails: {
            base: string;
        };
    };
}, {
    base: string;
    indicator: string;
}, undefined, {
    selected: {
        true: {
            indicator: string;
        };
        false: {
            indicator: string;
        };
    };
    position: {
        top: {
            base: string;
        };
        bottom: {
            base: string;
        };
        withThumbnails: {
            base: string;
        };
    };
}, {
    base: string;
    indicator: string;
}, import("tailwind-variants").TVReturnType<{
    selected: {
        true: {
            indicator: string;
        };
        false: {
            indicator: string;
        };
    };
    position: {
        top: {
            base: string;
        };
        bottom: {
            base: string;
        };
        withThumbnails: {
            base: string;
        };
    };
}, {
    base: string;
    indicator: string;
}, undefined, unknown, unknown, undefined>>;
export type CarouselIndicatorsSlots = keyof typeof carouselIndicators.slots;
export type CarouselIndicatorsTheme = Partial<Record<CarouselIndicatorsSlots, ClassValue>>;
export declare const controlButton: import("tailwind-variants").TVReturnType<{
    forward: {
        true: string;
        false: string;
    };
}, {
    base: string;
    span: string;
}, undefined, {
    forward: {
        true: string;
        false: string;
    };
}, {
    base: string;
    span: string;
}, import("tailwind-variants").TVReturnType<{
    forward: {
        true: string;
        false: string;
    };
}, {
    base: string;
    span: string;
}, undefined, unknown, unknown, undefined>>;
export type ControlButtonSlots = keyof typeof controlButton.slots;
export type ControlButtonTheme = Partial<Record<ControlButtonSlots, ClassValue>>;
export declare const thumbnails: import("tailwind-variants").TVReturnType<{} | {} | {}, undefined, "flex flex-row justify-center bg-gray-100 w-full", {} | {}, undefined, import("tailwind-variants").TVReturnType<unknown, undefined, "flex flex-row justify-center bg-gray-100 w-full", unknown, unknown, undefined>>;
export type ThumbnailsTheme = ClassValue;
export declare const thumbnail: import("tailwind-variants").TVReturnType<{
    selected: {
        true: string;
        false: string;
    };
}, undefined, "", {
    selected: {
        true: string;
        false: string;
    };
}, undefined, import("tailwind-variants").TVReturnType<{
    selected: {
        true: string;
        false: string;
    };
}, undefined, "", unknown, unknown, undefined>>;
export type ThumbnailTheme = ClassValue;
export declare const slide: import("tailwind-variants").TVReturnType<{} | {} | {}, undefined, "absolute block w-full! h-full object-cover", {} | {}, undefined, import("tailwind-variants").TVReturnType<unknown, undefined, "absolute block w-full! h-full object-cover", unknown, unknown, undefined>>;
export type SlideTheme = ClassValue;
